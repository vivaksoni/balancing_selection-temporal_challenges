// simulate sequences with actual nucleotides

initialize() {
    defineGlobal("start", clock());
	 defineConstant("var_h", 1);
	 defineConstant("bp_Nes", d_bp_Nes);
	 defineConstant("scale", 1);
	 defineConstant("Feq", 0.5);
    defineConstant("N", asInteger(10000 / 10));
    //defineConstant("Ncurrent", asInteger(d_Ncurrent / scale));
    //Chromosome with 2 genes, each comprised of 9 1317bp exons, 8 1520bp introns, and separated by a 4322bp intergenic region
    //Total chromosome length: 85005

    
    defineConstant("burnIn", asInteger(10 * N)); // Length of burnin. BP is introduced immediately after burnin. (in N gens)
    //defineConstant("samplingA", asInteger(25 * N) + burnIn); //First sampling time is 25N generations after BP is introduced
    //defineConstant("samplingB", asInteger((50 * N) + burnIn)); //Second sampling time is 50N generations after BP is introduced
    //defineConstant("gSplit", asInteger(45 * N));
    //defineConstant("cSplit", asInteger(60 * N));
    //defineConstant("samplingC", asInteger((74 * N) + burnIn)); //Size change 99N generations after BP is introduced
    defineConstant("simEnd", asInteger(75 * N) + burnIn); //Final sampling time is 75N generations after BP is introduced.

	//MUTATION RATE//
	//fixed recombination rate (Nachman and Crowell 2000 average)
		mu = 2.5e-8 * scale;
		initializeMutationRate(mu);

    
    // mutation types:
    //2Nes = [0, -1, -10, -100, -10000], s = [0.0, -0.0001, -0.001, -0.01, -1]
    initializeMutationType("m1", 0.5, "f", 0.0); //selectively neutral
    // Genomic elements:
    initializeGenomicElementType("g1", m1, 1.0); //intergenic
    initializeMutationType("m0", var_h, "f", bp_Nes/(N*2));
    
  //Initialise genomic element
  initializeGenomicElement(g1, 0, 499);
    
    
	//RECOMBINATION RATE//
	//fixed recombination rate (Payseur and Nachman 2000).
		rr = 1e-8 * scale;
		initializeRecombinationRate(rr);

}

1 early() {
    defineConstant("simID",getSeed()); // get seed in case of re-run
    sim.addSubpop("p1", N); // 1e4 scaled by 100
    community.rescheduleScriptBlock(s1, start=burnIn, end=burnIn);
    community.rescheduleScriptBlock(s2, start=burnIn, end=simEnd);
}


s1 late() {
    print('Burnin complete; bp introduced');
    print("Peak Mem Usage: " + usage(peak = T));
	 print("Runtime: " + (clock()-start));
	 print('--------------------------------------------------------------');
	
	// introduce the sweep mutation
	target = sample(p1.genomes, 1);
	target.addNewDrawnMutation(m0, 250);
}
//late(){
//        mut = sim.mutationsOfType(m0);
//        freqs = sim.mutationFrequencies(NULL, mut);
//        for (index in seqAlong(mut))
//		mut[index].setSelectionCoeff(Feq - freqs[index]);
//}

s2 late(){
	mut = sim.mutationsOfType(m0);
	if (size(mut) == 1)
	{
		if (sim.mutationFrequencies(NULL, mut) > 0.1)
		{
			print("Runtime: " + (clock()-start));
			cat(simID + ": ESTABLISHED\n");
			sim.simulationFinished();
			m0muts = sim.mutationsOfType(m0);
			sim.outputMutations(m0muts, d_folder + "neutral_" + bp_Nes + ".bs", append=T);
		}
	}
	else
	{
		print("Runtime: " + (clock()-start));
		cat(simID + ": LOST\n");
		sim.simulationFinished();
		m0muts = sim.mutationsOfType(m0);
		sim.outputMutations(m0muts, d_folder + "neutral_" + bp_Nes + ".bs", append=T);
	}
}
 
