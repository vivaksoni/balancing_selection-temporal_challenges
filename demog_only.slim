initialize() {
    defineGlobal("start", clock());
	 defineConstant("var_h", 0.5);
	 defineConstant("bp_Nes", d_bp_Nes);
	 defineConstant("scale", d_scale);
	 defineConstant("Feq", 0.5);
    defineConstant("N", asInteger(10000 / scale));
    defineConstant("Ncurrent", asInteger(d_Ncurrent / scale));
	 //defineConstant("var_age", 1000);
    defineConstant("L", 50000);
    
    defineConstant("burnIn", asInteger(10 * N)); // Length of burnin. BP is introduced immediately after burnin. (in N gens)
    defineConstant("samplingA", asInteger((0.01 * N) + burnIn)); //First sampling time is 0.01N generations after BP is introduced
    defineConstant("samplingB", asInteger((0.1 * N) + burnIn)); //Second sampling time is 0.1N generations after BP is introduced
    defineConstant("samplingC", asInteger((1 * N) + burnIn)); //Third sampling time is 1N generations after BP is introduced (also size change occurs here)
    defineConstant("samplingD", asInteger((10 * N) + burnIn)); //Fourth sampling time is 10N generations after size change & 2N generations after BP is introduced
    defineConstant("samplingE", asInteger((25 * N) + burnIn)); //Fifth sampling time is 25N generations after BP is introduced. Also end of simulation.
    defineConstant("samplingF", asInteger(50 * N) + burnIn); //Sixth sampling time is 50N generations after BP is introduced
    defineConstant("samplingG", asInteger((75 * N) + burnIn)); //Seventh sampling time is 75N generations after BP is introduced
    defineConstant("simEnd", asInteger(100 * N) + burnIn); //Final sampling time is 100N generations after BP is introduced.
    initializeMutationType("m1", 0.5, "f", 0.0);
    initializeMutationType("m0", var_h, "f", bp_Nes/(N*2));
    initializeMutationRate(2.5e-8 * scale);
    initializeGenomicElementType("g1", m1, 1.0); ///NS
    initializeGenomicElementType("g2", m1, 1.0); //S
    for (i in seq(0, L-1, 3))
    {
		  initializeGenomicElement(g1, i, i+1);
        initializeGenomicElement(g2, i+2, i+2);
    }
    initializeRecombinationRate(1e-8 * scale); // 1e-8 scaled by 100
}

1 early() {
    defineConstant("simID",getSeed()); // get seed in case of re-run
    sim.addSubpop("p1", N); // 1e4 scaled by 100
    community.rescheduleScriptBlock(s1, start=burnIn, end=burnIn);
    community.rescheduleScriptBlock(s2, start=samplingA, end=samplingA);
    community.rescheduleScriptBlock(s3, start=samplingB, end=samplingB);
    community.rescheduleScriptBlock(s4, start=samplingC, end=samplingC);
    community.rescheduleScriptBlock(s5, start=samplingD, end=samplingD);
    community.rescheduleScriptBlock(s6, start=samplingE, end=samplingE);
    community.rescheduleScriptBlock(s7, start=samplingF, end=samplingF);
    community.rescheduleScriptBlock(s8, start=samplingG, end=samplingG);
    community.rescheduleScriptBlock(s9, start=simEnd, end=simEnd);
    community.rescheduleScriptBlock(s10, start=burnIn, end=simEnd);
}


s1 late() {
    print('Burnin complete; state saved and bp introduced');
    print("Peak Mem Usage: " + usage(peak = T));
	 print("Runtime: " + (clock()-start));
	 print('--------------------------------------------------------------');
	// save the state of the simulation
	sim.outputFull("/home/vsoni11/balancing_selection/states/slim_" + d_repID + ".txt");
	
	// introduce the sweep mutation
	target = sample(p1.genomes, 1);
	target.addNewDrawnMutation(m0, 24999);
}
late(){
        mut = sim.mutationsOfType(m0);
        freqs = sim.mutationFrequencies(NULL, mut);
        for (index in seqAlong(mut))
		mut[index].setSelectionCoeff(Feq - freqs[index]);
}

s2 late(){
	 print('BP introduced 0.01N gens ago.');
    print("Peak Mem Usage: " + usage(peak = T));
	 print("Runtime: " + (clock()-start));
	 print('--------------------------------------------------------------');
   p1.outputMSSample(100, F, "*", d_folder + "/hSap_rep" + d_repID + "_0.01N.ms", F);

   //print all fixed mutations
   sim.outputFixedMutations(d_folder + "/hSap_rep" + d_repID + "_0.01N.fixed", append=F);
   m0muts = sim.mutationsOfType(m0);
   sim.outputMutations(m0muts, d_folder + "/hSap_rep" + d_repID + "_0.01N.bs", append=F);
	
}


s3 late(){
	 print('BP introduced 0.1N gens ago.');
    print("Peak Mem Usage: " + usage(peak = T));
	 print("Runtime: " + (clock()-start));
	 print('--------------------------------------------------------------');
   p1.outputMSSample(100, F, "*", d_folder + "/hSap_rep" + d_repID + "_0.1N.ms", F);

   //print all fixed mutations
   sim.outputFixedMutations(d_folder + "/hSap_rep" + d_repID + "_0.1N.fixed", append=F);
   m0muts = sim.mutationsOfType(m0);
   sim.outputMutations(m0muts, d_folder + "/hSap_rep" + d_repID + "_0.1N.bs", append=F);
	
}


s4 late(){
	 print('BP introduced 1N gens ago.');
    print("Peak Mem Usage: " + usage(peak = T));
	 print("Runtime: " + (clock()-start));
	 print('--------------------------------------------------------------');
   p1.outputMSSample(100, F, "*", d_folder + "/hSap_rep" + d_repID + "_1N.ms", F);

   //print all fixed mutations
   sim.outputFixedMutations(d_folder + "/hSap_rep" + d_repID + "_1N.fixed", append=F);
   m0muts = sim.mutationsOfType(m0);
   sim.outputMutations(m0muts, d_folder + "/hSap_rep" + d_repID + "_1N.bs", append=F);
	
}


s5 late(){
	 print('BP introduced 10N gens ago.');
    print("Peak Mem Usage: " + usage(peak = T));
	 print("Runtime: " + (clock()-start));
	 print('--------------------------------------------------------------');
   p1.outputMSSample(100, F, "*", d_folder + "/hSap_rep" + d_repID + "_10N.ms", F);

   //print all fixed mutations
   sim.outputFixedMutations(d_folder + "/hSap_rep" + d_repID + "_10N.fixed", append=F);
   m0muts = sim.mutationsOfType(m0);
   sim.outputMutations(m0muts, d_folder + "/hSap_rep" + d_repID + "_10N.bs", append=F);
	
}



s6 late(){
	 print('BP introduced 25N gens ago.');
    print("Peak Mem Usage: " + usage(peak = T));
	 print("Runtime: " + (clock()-start));
	 print('--------------------------------------------------------------');
   p1.outputMSSample(100, F, "*", d_folder + "/hSap_rep" + d_repID + "_25N.ms", F);

   //print all fixed mutations
   sim.outputFixedMutations(d_folder + "/hSap_rep" + d_repID + "_25N.fixed", append=F);
   m0muts = sim.mutationsOfType(m0);
   sim.outputMutations(m0muts, d_folder + "/hSap_rep" + d_repID + "_25N.bs", append=F);
	
}


s7 late(){
	print('BP introduced 50N gens ago.');
   print("Peak Mem Usage: " + usage(peak = T));
	print("Runtime: " + (clock()-start));
	print('--------------------------------------------------------------');
   p1.outputMSSample(100, F, "*", d_folder + "/hSap_rep" + d_repID + "_50N.ms", F);
	//p2.outputMSSample(100, F, "*", d_folder + "/pTro_rep" + d_repID + "_2N.ms", F);

   //print all fixed mutations
   sim.outputFixedMutations(d_folder + "/hSap_rep" + d_repID + "_50N.fixed", append=F);
   m0muts = sim.mutationsOfType(m0);
   sim.outputMutations(m0muts, d_folder + "/hSap_rep" + d_repID + "_50N.bs", append=F);
}


s8 late() {
	print('BP introduced 75N generations ago. New population size: ' + Ncurrent);
   print("Peak Mem Usage: " + usage(peak = T));
	print("Runtime: " + (clock()-start));
   p1.outputMSSample(100, F, "*", d_folder + "/hSap_rep" + d_repID + "_75N.ms", F);
   //print all fixed mutations
   sim.outputFixedMutations(d_folder + "/hSap_rep" + d_repID + "_75N.fixed", append=F);
   m0muts = sim.mutationsOfType(m0);
   sim.outputMutations(m0muts, d_folder + "/hSap_rep" + d_repID + "_75N.bs", append=F);
}


s10 late(){
	mut = sim.mutationsOfType(m0);
	if (size(mut) == 1)
	{
		if (sim.mutationFrequencies(NULL, mut) > 0.1)
		{
			cat(simID + ": ESTABLISHED\n");
			community.deregisterScriptBlock(self);
		}
	}
	else
	{
		cat(simID + ": LOST - RESTARTING\n");
		
		// go back to tick 1000
		sim.readFromPopulationFile("/home/vsoni11/balancing_selection/states/slim_" + d_repID + ".txt");
		
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^62) - 1));
		
		// re-introduce the sweep mutation
		target = sample(p1.genomes, 1);
		target.addNewDrawnMutation(m0, 24999);
	}
}
 


s9 late() {
        print('Final sampling time. BP introduced 100N generations ago. Simulation complete.');
   print("Peak Mem Usage: " + usage(peak = T));
        print("Runtime: " + (clock()-start));
   p1.outputMSSample(100, F, "*", d_folder + "/hSap_rep" + d_repID + "_100N.ms", F);

   //print all fixed mutations
   sim.outputFixedMutations(d_folder + "/hSap_rep" + d_repID + "_100N.fixed", append=F);
   m0muts = sim.mutationsOfType(m0);
   sim.outputMutations(m0muts, d_folder + "/hSap_rep" + d_repID + "_100N.bs", append=F);
}
