// simulate sequences with actual nucleotides

initialize() {
    defineGlobal("start", clock());
	 defineConstant("var_h", 0.5);
	 defineConstant("bp_Nes", d_bp_Nes);
	 defineConstant("scale", d_scale);
	 defineConstant("Feq", 0.5);
    defineConstant("N", asInteger(10000 / scale));
    defineConstant("Ncurrent", asInteger(d_Ncurrent / scale));
    //Chromosome with 2 genes, each comprised of 9 1317bp exons, 8 1520bp introns, and separated by a 4322bp intergenic region
    //Total chromosome length: 85005
    defineConstant("exonLength", 1317); //Ensembl data
    defineConstant("exonsPerGene", 9); //Sakharkar et al. 2004
    defineConstant("intronsPerGene", 8); //Sakharkar et al. 2004
    defineConstant("intronLength", 1520); //Median length: Hube and Francastel (2015)
    defineConstant("geneLength", (exonLength * exonsPerGene) + (intronLength * intronsPerGene));
    defineConstant("intergenicLength", 4322); //Ensembl data
    defineConstant("totalGenes", 3);
    
    defineConstant("burnIn", asInteger(10 * N)); // Length of burnin. BP is introduced immediately after burnin. (in N gens)
    defineConstant("simEnd", asInteger(75 * N) + burnIn); //Final sampling time is 75N generations after BP is introduced.
    defineConstant("samplingC", asInteger(simEnd - Ncurrent)); //Size change 74N generations after BP is introduced

	//MUTATION RATE//
	//fixed recombination rate (Nachman and Crowell 2000 average)
	if (d_mu_map=='fixed')
		{
		mu = 2.5e-8 * scale;
		initializeMutationRate(mu);
		}
	//variable rate (from input file)
	else
		{
		lines = readFile(d_mu_map);
	   mu = NULL;
	   coords = NULL;
	   for (line in lines)
	   	{
	      components = strsplit(line,"\t");
	      coords = c(coords, asInteger(components[0]));
	      mu = c(mu, asFloat(components[1]));
	      }
	   mu = mu * scale;
	   coords = c(coords[1:(size(coords)-1)] - 1, 85005);
	   initializeMutationRate(mu, coords);
	   }

    
    // mutation types:
    //2Nes = [0, -1, -10, -100, -10000], s = [0.0, -0.0001, -0.001, -0.01, -1]
    initializeMutationType("m1", 0.5, "f", 0.0); //selectively neutral
    initializeMutationType("m2", 0.5, "s", "return runif(1, -10/(N*2), -1/(N*2));"); //weakly deleterious (1<2Nes<10)
    initializeMutationType("m3", 0.5, "s", "return runif(1, -100/(N*2), -10/(N*2));"); //moderately deleterious (10<2Nes<100)
    initializeMutationType("m4", 0.5, "s", "return runif(1, -1000/(N*2), -100/(N*2));"); //strongly deleterious (100<2Nes<1000)
    // Genomic elements:
    initializeGenomicElementType("g1", m1, 1.0); //intergenic
    initializeGenomicElementType("g2", m1, 1.0); //intron
    initializeGenomicElementType("g3", c(m1, m2, m3, m4), c(d_f0, d_f1, d_f2, d_f3)); //exon
    initializeGenomicElementType("g4", m1, 1.0); //exon synonymous
    initializeMutationType("m0", var_h, "f", bp_Nes/(N*2));
    
  //Initialise genomic element
   //Chromosome with {totalGenes} no. ofgenes, each comprised of {exonsPerGene} {exonLength}bp exons;
   //{intronsPerGene} {intronLength}bp introns, and separated by a {intergenicLength}bp intergenic region
   //Loop through number of genes
        for (gene in 1:totalGenes)
                {
                //Set gene start
                geneStart = (gene-1) * (geneLength+intergenicLength) + 1;
                //Loop through elements within gene (ie number of exons)
                for (element in 1:exonsPerGene)
                        {
                        //Set exonStart and end coordinates
                        exonStart = geneStart + (exonLength * (element-1)) + (intronLength * (element-1));
                        exonEnd = exonStart+(exonLength-1);
                        for (i in seq(exonStart, exonEnd-1, 3))
                            {
                            initializeGenomicElement(g3, i, i+1);
                            initializeGenomicElement(g4, i+2, i+2);
                            }
                        //Each gene contains one less intron than exons
                        if (element < exonsPerGene)
                                {
                                //Set intron coordinates
                                intronStart = exonStart + exonLength;
                                intronEnd = intronStart+(intronLength-1);
                               initializeGenomicElement(g2, intronStart, intronEnd);
                                }
                        }
                //Set intergenic region coordinates
                intergenicStart = exonEnd + 1;
                intergenicEnd = intergenicStart + (intergenicLength-1);
                initializeGenomicElement(g1, intergenicStart, intergenicEnd);
                }
    
    
	//RECOMBINATION RATE//
	//fixed recombination rate (Payseur and Nachman 2000).
	if (d_rr_map=='fixed')
		{
		rr = 1e-8 * scale;
		initializeRecombinationRate(rr);
		}
	//variable rate (from input file - already adjusted for sex-average rate)
	else
		{
		lines = readFile(d_rr_map);
	   rr = NULL;
	   coords = NULL;
	   for (line in lines)
	   	{
	      components = strsplit(line,"\t");
	      coords = c(coords, asInteger(components[0]));
	      rr = c(rr, asFloat(components[1]));
	      }
	   rr = rr * scale * 1e-8;
	   coords = c(coords[1:(size(coords)-1)] - 1, 85005);
	   initializeRecombinationRate(rr, coords);
	   }

}

1 early() {
    defineConstant("simID",getSeed()); // get seed in case of re-run
    sim.addSubpop("p1", N); // 1e4 scaled by 100
    community.rescheduleScriptBlock(s1, start=burnIn, end=burnIn);
    community.rescheduleScriptBlock(s2, start=samplingC, end=samplingC);
    community.rescheduleScriptBlock(s3, start=simEnd, end=simEnd);
    community.rescheduleScriptBlock(s4, start=burnIn, end=simEnd);
}


s1 late() {
    print('Burnin complete; state saved and bp introduced');
    print("Peak Mem Usage: " + usage(peak = T));
	 print("Runtime: " + (clock()-start));
	 print('--------------------------------------------------------------');
	// save the state of the simulation
	sim.outputFull("states/slim_" + d_DFE + '_' + d_repID + ".txt");
	
	// introduce the sweep mutation
	target = sample(p1.genomes, 1);
	target.addNewDrawnMutation(m0, 40342);
}
late(){
        mut = sim.mutationsOfType(m0);
        freqs = sim.mutationFrequencies(NULL, mut);
        for (index in seqAlong(mut))
		mut[index].setSelectionCoeff(Feq - freqs[index]);
}


s2 late() {
   p1.setSubpopulationSize(asInteger(Ncurrent));
}


s4 late(){
	mut = sim.mutationsOfType(m0);
	if (size(mut) == 1)
	{
		if (sim.mutationFrequencies(NULL, mut) > 0.1)
		{
			cat(simID + ": ESTABLISHED\n");
			community.deregisterScriptBlock(self);
		}
	}
	else
	{
		cat(simID + ": LOST - RESTARTING\n");
		
		// go back to tick 1000
		sim.readFromPopulationFile("states/slim_" + d_DFE + '_' + d_repID + ".txt");
		
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^62) - 1));
		
		// re-introduce the sweep mutation
		target = sample(p1.genomes, 1);
		target.addNewDrawnMutation(m0, 40342);
	}
}
 


s3 late() {
        print('Final sampling time. BP introduced 75N generations ago. Simulation complete.');
   print("Peak Mem Usage: " + usage(peak = T));
        print("Runtime: " + (clock()-start));
   p1.outputMSSample(100, F, "*", d_folder + "_hSap_DFE" + d_DFE + "_rep" + d_repID + "_75N.ms", F);
        //p2.outputMSSample(100, F, "*", d_folder + "/pTro_rep" + d_repID + "_100N.ms", F);

   //print all fixed mutations
   sim.outputFixedMutations(d_folder + "_hSap_DFE" + d_DFE + "_rep" + d_repID + "_75N.fixed", append=F);
   m0muts = sim.mutationsOfType(m0);
   sim.outputMutations(m0muts, d_folder + "_hSap_DFE" + d_DFE + "_rep" + d_repID + "_75N.bs", append=F);
}
